// Code generated by MockGen. DO NOT EDIT.
// Source: intrefaces.go

// Package set_impulse is a generated GoMock package.
package set_impulse

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImpulse is a mock of Impulse interface.
type MockImpulse struct {
	ctrl     *gomock.Controller
	recorder *MockImpulseMockRecorder
}

// MockImpulseMockRecorder is the mock recorder for MockImpulse.
type MockImpulseMockRecorder struct {
	mock *MockImpulse
}

// NewMockImpulse creates a new mock instance.
func NewMockImpulse(ctrl *gomock.Controller) *MockImpulse {
	mock := &MockImpulse{ctrl: ctrl}
	mock.recorder = &MockImpulseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImpulse) EXPECT() *MockImpulseMockRecorder {
	return m.recorder
}

// IsValid mocks base method.
func (m *MockImpulse) IsValid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockImpulseMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockImpulse)(nil).IsValid))
}

// Source mocks base method.
func (m *MockImpulse) Source() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockImpulseMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockImpulse)(nil).Source))
}

// Trimmed mocks base method.
func (m *MockImpulse) Trimmed() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trimmed")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trimmed indicates an expected call of Trimmed.
func (mr *MockImpulseMockRecorder) Trimmed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trimmed", reflect.TypeOf((*MockImpulse)(nil).Trimmed))
}
